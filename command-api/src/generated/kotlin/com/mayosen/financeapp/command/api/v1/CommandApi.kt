/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mayosen.financeapp.command.api.v1

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import jakarta.validation.Valid
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RestController

@RestController
@Validated
interface CommandApi {
    @Operation(
        tags = ["command"],
        summary = "Create a new account",
        operationId = "createAccount",
        description = """""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Account created successfully",
                content = [Content(schema = Schema(implementation = CommandResponse::class))],
            ),
        ],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/command-api/v1/commands/accounts"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun createAccount(
        @Parameter(
            description = "",
            required = true,
        ) @Valid @RequestBody createAccountRequest: CreateAccountRequest,
    ): ResponseEntity<CommandResponse>

    @Operation(
        tags = ["command"],
        summary = "Deposit money to account",
        operationId = "deposit",
        description = """""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Deposit completed successfully",
                content = [Content(schema = Schema(implementation = CommandResponse::class))],
            ),
        ],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/command-api/v1/commands/deposit"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun deposit(
        @Parameter(
            description = "",
            required = true,
        ) @Valid @RequestBody depositRequest: DepositRequest,
    ): ResponseEntity<CommandResponse>

    @Operation(
        tags = ["command"],
        summary = "Transfer money between accounts",
        operationId = "transfer",
        description = """""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Transfer completed successfully",
                content = [Content(schema = Schema(implementation = CommandResponse::class))],
            ),
        ],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/command-api/v1/commands/transfer"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun transfer(
        @Parameter(
            description = "",
            required = true,
        ) @Valid @RequestBody transferRequest: TransferRequest,
    ): ResponseEntity<CommandResponse>

    @Operation(
        tags = ["command"],
        summary = "Withdraw money from account",
        operationId = "withdraw",
        description = """""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Withdrawal completed successfully",
                content = [Content(schema = Schema(implementation = CommandResponse::class))],
            ),
        ],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/command-api/v1/commands/withdraw"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun withdraw(
        @Parameter(
            description = "",
            required = true,
        ) @Valid @RequestBody withdrawRequest: WithdrawRequest,
    ): ResponseEntity<CommandResponse>
}
